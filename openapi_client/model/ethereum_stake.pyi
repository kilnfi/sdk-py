# coding: utf-8

"""
    Kiln Connect

    This API provides reporting staking data on various protocols as well as network wide data, staking transaction crafting features and so on.  In order to use it, you should first get an API token from your Kiln dashboard (applications section). If you don't have access to our dashboard, please get in touch at hello@kiln.fi.  Once you have your API token, you can set it as a bearer token in your request headers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@kiln.fi
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EthereumStake(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            validator_address = schemas.StrSchema
            state = schemas.StrSchema
            
            
            class activated_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'activated_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class activated_epoch(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'activated_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class delegated_block(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delegated_block':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class deposit_tx_sender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deposit_tx_sender':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class execution_fee_recipient(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'execution_fee_recipient':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class withdrawal_credentials(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'withdrawal_credentials':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class effective_balance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'effective_balance':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class balance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'balance':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class consensus_rewards(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'consensus_rewards':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class execution_rewards(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'execution_rewards':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class rewards(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rewards':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class gross_apy(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gross_apy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "validator_address": validator_address,
                "state": state,
                "activated_at": activated_at,
                "activated_epoch": activated_epoch,
                "delegated_block": delegated_block,
                "deposit_tx_sender": deposit_tx_sender,
                "execution_fee_recipient": execution_fee_recipient,
                "withdrawal_credentials": withdrawal_credentials,
                "effective_balance": effective_balance,
                "balance": balance,
                "consensus_rewards": consensus_rewards,
                "execution_rewards": execution_rewards,
                "rewards": rewards,
                "gross_apy": gross_apy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validator_address"]) -> MetaOapg.properties.validator_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activated_at"]) -> MetaOapg.properties.activated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activated_epoch"]) -> MetaOapg.properties.activated_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegated_block"]) -> MetaOapg.properties.delegated_block: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deposit_tx_sender"]) -> MetaOapg.properties.deposit_tx_sender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_fee_recipient"]) -> MetaOapg.properties.execution_fee_recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withdrawal_credentials"]) -> MetaOapg.properties.withdrawal_credentials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_balance"]) -> MetaOapg.properties.effective_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consensus_rewards"]) -> MetaOapg.properties.consensus_rewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_rewards"]) -> MetaOapg.properties.execution_rewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewards"]) -> MetaOapg.properties.rewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_apy"]) -> MetaOapg.properties.gross_apy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["validator_address", "state", "activated_at", "activated_epoch", "delegated_block", "deposit_tx_sender", "execution_fee_recipient", "withdrawal_credentials", "effective_balance", "balance", "consensus_rewards", "execution_rewards", "rewards", "gross_apy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validator_address"]) -> typing.Union[MetaOapg.properties.validator_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activated_at"]) -> typing.Union[MetaOapg.properties.activated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activated_epoch"]) -> typing.Union[MetaOapg.properties.activated_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegated_block"]) -> typing.Union[MetaOapg.properties.delegated_block, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deposit_tx_sender"]) -> typing.Union[MetaOapg.properties.deposit_tx_sender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_fee_recipient"]) -> typing.Union[MetaOapg.properties.execution_fee_recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withdrawal_credentials"]) -> typing.Union[MetaOapg.properties.withdrawal_credentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_balance"]) -> typing.Union[MetaOapg.properties.effective_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consensus_rewards"]) -> typing.Union[MetaOapg.properties.consensus_rewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_rewards"]) -> typing.Union[MetaOapg.properties.execution_rewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewards"]) -> typing.Union[MetaOapg.properties.rewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_apy"]) -> typing.Union[MetaOapg.properties.gross_apy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["validator_address", "state", "activated_at", "activated_epoch", "delegated_block", "deposit_tx_sender", "execution_fee_recipient", "withdrawal_credentials", "effective_balance", "balance", "consensus_rewards", "execution_rewards", "rewards", "gross_apy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        validator_address: typing.Union[MetaOapg.properties.validator_address, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        activated_at: typing.Union[MetaOapg.properties.activated_at, None, str, datetime, schemas.Unset] = schemas.unset,
        activated_epoch: typing.Union[MetaOapg.properties.activated_epoch, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delegated_block: typing.Union[MetaOapg.properties.delegated_block, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deposit_tx_sender: typing.Union[MetaOapg.properties.deposit_tx_sender, None, str, schemas.Unset] = schemas.unset,
        execution_fee_recipient: typing.Union[MetaOapg.properties.execution_fee_recipient, None, str, schemas.Unset] = schemas.unset,
        withdrawal_credentials: typing.Union[MetaOapg.properties.withdrawal_credentials, None, str, schemas.Unset] = schemas.unset,
        effective_balance: typing.Union[MetaOapg.properties.effective_balance, None, str, schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, None, str, schemas.Unset] = schemas.unset,
        consensus_rewards: typing.Union[MetaOapg.properties.consensus_rewards, None, str, schemas.Unset] = schemas.unset,
        execution_rewards: typing.Union[MetaOapg.properties.execution_rewards, None, str, schemas.Unset] = schemas.unset,
        rewards: typing.Union[MetaOapg.properties.rewards, None, str, schemas.Unset] = schemas.unset,
        gross_apy: typing.Union[MetaOapg.properties.gross_apy, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EthereumStake':
        return super().__new__(
            cls,
            *_args,
            validator_address=validator_address,
            state=state,
            activated_at=activated_at,
            activated_epoch=activated_epoch,
            delegated_block=delegated_block,
            deposit_tx_sender=deposit_tx_sender,
            execution_fee_recipient=execution_fee_recipient,
            withdrawal_credentials=withdrawal_credentials,
            effective_balance=effective_balance,
            balance=balance,
            consensus_rewards=consensus_rewards,
            execution_rewards=execution_rewards,
            rewards=rewards,
            gross_apy=gross_apy,
            _configuration=_configuration,
            **kwargs,
        )
